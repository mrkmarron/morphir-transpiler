namespace NSMain;

typedef AllowPartials = Bool;

typedef Availability = Int;

typedef CancelationRatio = Float;

typedef CanceledQuantity = Int;

typedef CurrentInventory = Int;

typedef ExistingReservations = Int;

enum ExpertiseLevel {
    expert,
    intermediate,
    novice
}

typedef PendingReturns = Int;

typedef ProbableReservations = Int;

enum Reason {
    closedDueToConditions,
    insufficientAvailability
}

typedef RequestedQuantity = Int;

typedef ReservationQuantity = Int;

typedef Celcius = Int;

typedef Forecast = {temp: {low: Celcius, high: Celcius}, windSpeed: {min: MPH, max: MPH}, windDirection: WindDirection, shortForcast: ForecastDetail, forecastPercent: ForecastPercent};

enum ForecastDetail {
    fog,
    showers,
    snow,
    thunderstorms
}

typedef ForecastPercent = Float;

typedef MPH = Int;

enum WindDirection {
    east,
    north,
    south,
    west
}

enum WindCategory {
    calm,
    dangerousWinds,
    highWinds,
    windy
}

function probableReservations(averageReservationRequests: ReservationQuantity, averageCancelations: CanceledQuantity, currentReservationCount: ReservationQuantity): ProbableReservations {
    let cancelationRatio = ((averageCancelations).toFloat() / (averageReservationRequests).toFloat());
    let result = (((currentReservationCount).toFloat() * (1.0f - cancelationRatio))).ceiling().toInt();
    return result;
}

function categorizeWindForForecast(forecast: Forecast): WindCategory {
    let windCategory = categorizeWind(forecast.windSpeed.max);
    return windCategory;
}

function main(forecast: Forecast, inventory: CurrentInventory, reservations: ExistingReservations, reservationQuantity: ReservationQuantity, canceledQuantity: CanceledQuantity, returns: PendingReturns, requestedQuantity: RequestedQuantity, allowPartials: AllowPartials): Result<ReservationQuantity, Reason> {
    let windCategory = categorizeWindForForecast(forecast);
    let estimatedReservations = probableReservations(reservationQuantity, canceledQuantity, reservations);
    return decide(windCategory, forecast.shortForcast, inventory, estimatedReservations, returns, requestedQuantity, allowPartials);
}

function decide(windCategory: WindCategory, forecastDetail: ForecastDetail, inventory: CurrentInventory, probableReservations: ProbableReservations, returns: PendingReturns, requestedQuantity: RequestedQuantity, allowPartials: AllowPartials): Result<ReservationQuantity, Reason> {
    let isClosed = ((windCategory === WindCategory::dangerousWinds) || (forecastDetail === ForecastDetail::thunderstorms));
    let availability = ((inventory - probableReservations) + returns);
    if (isClosed) {
        return err(Reason::closedDueToConditions);
    }
    else {
        if ((availability == 0i)) {
            return err(Reason::insufficientAvailability);
        }
        else {
            if ((requestedQuantity <= availability)) {
                return ok(requestedQuantity);
            }
            else {
                if (allowPartials) {
                    return ok(availability);
                }
                else {
                    return err(Reason::insufficientAvailability);
                }
            }
        }
    }
}

function categorizeWind(windSpeed: Int): WindCategory {
    if ((windSpeed < 10i)) {
        return WindCategory::calm;
    }
    else {
        if ((windSpeed < 20i)) {
            return WindCategory::highWinds;
        }
        else {
            if ((windSpeed < 30i)) {
                return WindCategory::windy;
            }
            else {
                return WindCategory::dangerousWinds;
            }
        }
    }
}